{"version":3,"sources":["Store/reducers/searchRobots.js","Store/reducers/requestRobots.js","serviceWorker.js","API/Data/HeaderJson.jsx","Components/Header/Header.jsx","Routing/AsyncComponent.jsx","Routing/Routing.jsx","Containers/Home/Home.jsx","index.js","Store/actions/actionTypes.js"],"names":["intialState","searchField","isPending","robots","error","Boolean","window","location","hostname","match","HeaderJson","title_name","route","Header","react_default","a","createElement","className","headerJson","map","header","index","react_router_dom","to","key","asyncComponent","importComponent","_React$Component","AsyncComponent","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","component","inherits","createClass","value","_componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","_ref","wrap","_context","prev","next","sent","default","setState","stop","Component","props","React","Routes","AsyncMainComponent","__webpack_require__","e","then","bind","AsyncRobotsComponent","AsyncIntroduction","react_router","exact","path","Home","Components_Header_Header","Routing","rootReducer","combineReducers","searchRobots","undefined","action","type","CHANGE_SEARCH_FIELD","assign","payload","requestRobots","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","store","createStore","applyMiddleware","tunkMiddleware","logger","ReactDOM","render","es","Home_Home","document","getElementById","navigator","serviceWorker","ready","registration","unregister","d","__webpack_exports__"],"mappings":"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","file":"static/js/main.3f4065d1.chunk.js","sourcesContent":["import { CHANGE_SEARCH_FIELD } from \"../actions/actionTypes\";\r\nconst intialState = {\r\n  searchField: \"\"\r\n};\r\n\r\nexport const searchRobots = (state = intialState, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"../actions/actionTypes\";\r\n\r\nconst intialState = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: null\r\n};\r\n\r\nexport const requestRobots = (state = intialState, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        isPending: false,\r\n        robots: action.payload\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        isPending: false,\r\n        error: action.payload\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const HeaderJson = [\r\n  {\r\n    title_name: \"Home\",\r\n    route: \"/home\"\r\n  },\r\n  {\r\n    title_name: \"About me\",\r\n    route: \"/aboutme\"\r\n  }\r\n];\r\n\r\nexport default HeaderJson;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport headerJson from \"../../API/Data/HeaderJson\";\r\nfunction Header() {\r\n  return (\r\n    <header className=\"h3 pa3 tr\">\r\n      {headerJson.map((header, index) => (\r\n        <Link\r\n          to={header.route}\r\n          key={index}\r\n          className=\"link dim dark-blue header-link\"\r\n        >\r\n          {header.title_name}\r\n        </Link>\r\n      ))}\r\n    </header>\r\n  );\r\n}\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nexport default function asyncComponent(importComponent) {\r\n  class AsyncComponent extends React.Component {\r\n    state = {\r\n      component: null\r\n    };\r\n    async componentDidMount() {\r\n      const { default: component } = await importComponent();\r\n      this.setState({\r\n        component: component\r\n      });\r\n    }\r\n    render() {\r\n      const Component = this.state.component;\r\n      return Component ? <Component {...this.props} /> : null;\r\n    }\r\n  }\r\n  return AsyncComponent;\r\n}\r\n","import React from \"react\";\r\nimport AsyncComponent from \"../Routing/AsyncComponent\";\r\n\r\nimport { Route, Switch } from \"react-router-dom\";\r\nclass Routes extends React.Component {\r\n  render() {\r\n    const AsyncMainComponent = AsyncComponent(() =>\r\n      import(\"../Containers/ProjectsListHome/ProjectsListHome\")\r\n    );\r\n    const AsyncRobotsComponent = AsyncComponent(() =>\r\n      import(\"../Containers/RobotsHome/RobotsHome\")\r\n    );\r\n    const AsyncIntroduction = AsyncComponent(() =>\r\n      import(\"../Containers/Introduction/Introduction\")\r\n    );\r\n    return (\r\n      <Switch>\r\n        <Route exact path=\"/\" component={AsyncMainComponent} />\r\n        <Route exact path=\"/home\" component={AsyncMainComponent} />\r\n        <Route path=\"/robots\" component={AsyncRobotsComponent} />\r\n        <Route path=\"/intro\" component={AsyncIntroduction} />\r\n      </Switch>\r\n    );\r\n  }\r\n}\r\nexport default Routes;\r\n","import React from \"react\";\r\nimport Appbar from \"../../Components/Header/Header\";\r\nimport Routes from \"../../Routing/Routing\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <div>\r\n      <Appbar />\r\n      <Routes />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\n//router\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\n//Reducer\nimport { searchRobots } from \"./Store/reducers/searchRobots\";\nimport { requestRobots } from \"./Store/reducers/requestRobots\";\n\n//external packages\nimport { logger } from \"redux-logger\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport tunkMiddleware from \"redux-thunk\";\n//css generater\nimport \"tachyons\";\n\n//app work offline\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport Home from \"./Containers/Home/Home\";\n\nconst rootReducer = combineReducers({\n  searchRobots,\n  requestRobots\n});\n// const logger = createLogger;\nconst store = createStore(rootReducer, applyMiddleware(tunkMiddleware, logger));\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <Home />\n    </HashRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n"],"sourceRoot":""}