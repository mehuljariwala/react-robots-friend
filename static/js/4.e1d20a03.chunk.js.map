{"version":3,"sources":["Components/Robots-Components/Card/Card.js","Components/Robots-Components/CardList/CardList.js","Components/Robots-Components/SearchBox/SearchBox.js","Components/Robots-Components/Scroll/Scroll.js","Components/Robots-Components/ErrorBoundry/ErrorBoundry.js","Containers/RobotsHome/RobotsHome.jsx","Store/actions/actions.js","Config/config.js"],"names":["Card","props","react_default","a","createElement","className","src","concat","id","alt","name","email","CardList","_ref","cardComponent","robots","map","user","index","Robots_Components_Card_Card","key","Fragment","SearchBox","searchField","onSearchChange","type","placeholder","onChange","value","styles","scrollbar","overflowY","border","height","Scroll","style","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","RobotsHome","onHomeClick","_this","history","push","onRequestRobots","_this$props","isPending","filterRobots","filter","robot","toLowerCase","includes","Robots_Components_SearchBox_SearchBox","Robots_Components_Scroll_Scroll","Robots_Components_ErrorBoundry_ErrorBoundry","Robots_Components_CardList_CardList","connect","searchRobots","requestRobots","dispatch","event","text","target","CHANGE_SEARCH_FIELD","payload","REQUEST_ROBOTS_PENDING","fetch","then","response","json","data","REQUEST_ROBOTS_SUCCESS","catch","REQUEST_ROBOTS_FAILED","withRouter"],"mappings":"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","file":"static/js/4.e1d20a03.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 \">\r\n      <img src={`https://robohash.org/${props.id}?200*200`} alt=\"robots\" />\r\n      <div>\r\n        <h2>{props.name}</h2>\r\n        <p>{props.email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"../Card/Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  // if (true) {\r\n  //   throw new Error(\"NOOOOOOO\");\r\n  // }\r\n  const cardComponent = robots.map((user, index) => (\r\n    <Card name={user.name} id={user.id} key={index} />\r\n  ));\r\n  return <>{cardComponent}</>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchField, onSearchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search robots here\"\r\n        className=\"pa3 ba b--green bg-hightest-blue w-50\"\r\n        onChange={onSearchChange}\r\n        value={searchField}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst styles = {\r\n  scrollbar: {\r\n    overflowY: \"scroll\",\r\n    border: \"1px solid black\",\r\n    height: \"800px\"\r\n  }\r\n};\r\nconst Scroll = props => {\r\n  return <div style={styles.scrollbar}>{props.children}</div>;\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  state = {\r\n    hasError: false\r\n  };\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n  componentDidCatch(error, info) {\r\n    // You can also log the error to an error reporting service\r\n    this.setState({\r\n      hasError: true\r\n    });\r\n  }\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oooops. That is not good</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from \"react\";\r\n\r\nimport CardList from \"../../Components/Robots-Components/CardList/CardList\";\r\nimport SearchBox from \"../../Components/Robots-Components/SearchBox/SearchBox\";\r\nimport Scroll from \"../../Components/Robots-Components/Scroll/Scroll\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport \"./RobotsHome.css\";\r\nimport { setSearchField, requestRobots } from \"../../Store/actions/actions\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport ErrorBoundry from \"../../Components/Robots-Components/ErrorBoundry/ErrorBoundry\";\r\n\r\nclass RobotsHome extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n  onHomeClick = () => {\r\n    this.props.history.push(\"/home\");\r\n  };\r\n\r\n  render() {\r\n    const { searchField, robots, isPending } = this.props;\r\n    let filterRobots = robots;\r\n    filterRobots = filterRobots.filter(robot =>\r\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n    return isPending ? (\r\n      <h1 className=\"heading1\">Loading....</h1>\r\n    ) : (\r\n      <div className=\"robo-home\">\r\n        <img\r\n          className=\"robo-image\"\r\n          alt=\"robo\"\r\n          src=\"https://www.stickpng.com/assets/thumbs/580b57fbd9996e24bc43be10.png\"\r\n        />\r\n        <div className=\"tc\">\r\n          <h1 className=\"f1 heading1\">Robots Friend</h1>\r\n          <SearchBox\r\n            onSearchChange={this.props.onSearchChange}\r\n            searchField={searchField}\r\n          />\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filterRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => {\r\n      dispatch(setSearchField(event.target.value));\r\n    },\r\n    onRequestRobots: () => {\r\n      dispatch(requestRobots());\r\n    }\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(RobotsHome));\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./actionTypes\";\r\n\r\nimport { fetch_user_url } from \"../../Config/config.js\";\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(fetch_user_url)\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n};\r\n","export const fetch_user_url = \"https://jsonplaceholder.typicode.com/users\";\r\n"],"sourceRoot":""}